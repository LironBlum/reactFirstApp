{"ast":null,"code":"var _jsxFileName = \"/Users/lironblum/dev/side/reactUdemy/myapplication/src/App.js\";\nimport React, { Component } from 'react';\nimport Radium from 'radium';\nimport { Person } from './components/index';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [{\n        id: '1',\n        name: 'Joana',\n        age: 22\n      }, {\n        id: '2',\n        name: 'Joan',\n        age: 18\n      }, {\n        id: '3',\n        name: 'Jo',\n        age: 15\n      }],\n      showPersons: true\n    };\n\n    this.handleClick = () => {\n      const doesShow = this.state.showPersons;\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n\n    this.handleNameChange = (event, id) => {\n      // Find the index of persons in which the id matches the argument id\n      const personIdx = this.state.persons.findIndex(p => {\n        return p.id === id;\n      }); // Use the spread operator to duplicate the state object rather than changing the original\n\n      const person = { ...this.state.persons[personIdx]\n      }; // Grab the user input value using an event function\n\n      person.name = event.target.value; // Duplicate the persons array\n\n      const persons = [...this.state.persons];\n      persons[personIdx] = person;\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.handleClickDelete = personIdx => {\n      const persons = this.state.persons.slice();\n      persons.splice(personIdx, 1);\n      this.setState({\n        persons: persons\n      });\n    };\n  }\n\n  render() {\n    const buttonStyle = {\n      backgroundColor: 'green',\n      color: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, this.state.persons.map((person, idx) => {\n        return /*#__PURE__*/React.createElement(Person, {\n          name: person.name,\n          age: person.age,\n          key: person.id,\n          change: event => this.handleNameChange(event, person.id),\n          click: () => this.handleClickDelete(idx),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 20\n          }\n        });\n      }));\n      buttonStyle.backgroundColor = 'red';\n      buttonStyle[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      };\n    }\n\n    const classes = [];\n\n    if (this.state.persons.length <= 2) {\n      classes.push('red');\n    }\n\n    if (this.state.persons.length <= 1) {\n      classes.push('bold');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, \"Hello, world!\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.join(' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, \"This is really working!\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      style: buttonStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"Toggle persons\"), persons);\n  }\n\n}\n\nexport default Radium(App);","map":{"version":3,"sources":["/Users/lironblum/dev/side/reactUdemy/myapplication/src/App.js"],"names":["React","Component","Radium","Person","App","state","persons","id","name","age","showPersons","handleClick","doesShow","setState","handleNameChange","event","personIdx","findIndex","p","person","target","value","handleClickDelete","slice","splice","render","buttonStyle","backgroundColor","color","font","border","padding","cursor","map","idx","classes","length","push","join"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Radium from 'radium';\nimport { Person } from './components/index';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: '1', name: 'Joana', age: 22 },\n      { id: '2', name: 'Joan', age: 18 },\n      { id: '3', name: 'Jo', age: 15 },\n    ],\n    showPersons: true\n  }\n\n  handleClick = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow })\n  }\n\n  // Two way binding example\n  handleNameChange = (event, id) => {\n    // Find the index of persons in which the id matches the argument id\n    const personIdx = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n    // Use the spread operator to duplicate the state object rather than changing the original\n    const person = {\n      ...this.state.persons[personIdx]\n    }\n    // Grab the user input value using an event function\n    person.name = event.target.value;\n    // Duplicate the persons array\n    const persons = [...this.state.persons];\n    persons[personIdx] = person;\n    this.setState({ persons: persons })\n  }\n\n  handleClickDelete = (personIdx) => {\n    const persons = this.state.persons.slice();\n    persons.splice(personIdx, 1);\n    this.setState({\n      persons: persons\n    })\n  }\n\n  render() {\n    const buttonStyle = {\n      backgroundColor: 'green',\n      color: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    }\n\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, idx) => {\n            return <Person\n              name={person.name} age={person.age} key={person.id}\n              change={(event) => this.handleNameChange(event, person.id)}\n              click={() => this.handleClickDelete(idx)}\n            />\n          })}\n        </div>\n      );\n      buttonStyle.backgroundColor = 'red';\n      buttonStyle[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      }\n    }\n\n    const classes = [];\n    if (this.state.persons.length <= 2) {\n      classes.push('red');\n    }\n    if (this.state.persons.length <= 1) {\n      classes.push('bold');\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Hello, world!</h1>\n        <p className={classes.join(' ')}>This is really working!</p>\n        <button onClick={this.handleClick} style={buttonStyle}>Toggle persons</button>\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default Radium(App);"]},"metadata":{},"sourceType":"module"}